[gd_scene load_steps=8 format=3 uid="uid://c8y3l2b0bkg26"]

[ext_resource type="Texture2D" uid="uid://byleef4w7gpgr" path="res://addons/sfx/transition/circle_center.png" id="1"]
[ext_resource type="Script" path="res://addons/sfx/transition/Transition.gd" id="2"]

[sub_resource type="Shader" id="1"]
code = "shader_type canvas_item;
render_mode unshaded;

uniform float cutoff : hint_range(0.0, 1.0);
uniform float smooth_size : hint_range(0.0, 1.0);
uniform sampler2D mask : source_color;


void fragment() {
	float value = texture(mask, UV).r;
	float alpha = smoothstep(cutoff, cutoff + smooth_size, value * (1.0 - smooth_size) + smooth_size);
	COLOR = vec4(COLOR.rgb, alpha);
}"

[sub_resource type="ShaderMaterial" id="2"]
shader = SubResource("1")
shader_parameter/cutoff = 1.0
shader_parameter/smooth_size = 0.2
shader_parameter/mask = ExtResource("1")

[sub_resource type="Animation" id="3"]
resource_name = "Reverse"
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:material:shader_param/cutoff")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 1),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [1.0, 0.0]
}

[sub_resource type="Animation" id="4"]
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:material:shader_param/cutoff")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 1),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [0.0, 1.0]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_4xvhs"]
_data = {
"Reverse": SubResource("3"),
"Start": SubResource("4")
}

[node name="Transition" type="ColorRect"]
material = SubResource("2")
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
color = Color(0, 0, 0, 1)
script = ExtResource("2")
reverse = true

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
libraries = {
"": SubResource("AnimationLibrary_4xvhs")
}

[connection signal="animation_finished" from="AnimationPlayer" to="." method="_on_AnimationPlayer_animation_finished"]
